{"version":3,"sources":["audio/chris-tarrent.mp3","audio/clock-telephone.mp3","audio/correct-4.mp3","audio/music-easy.mp3","audio/music-hard.mp3","audio/music-expert.mp3","audio/music-medium.mp3","audio/intro-5.mp3","audio/are-you-sure.mp3","audio/showdown-1.mp3","audio/wrong-answer-2.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","createSound","name","src","loop","className","controls","App","version","play","showdown","clock","selectAnswer","easyMusic","mediumMusic","hardMusic","harderMusic","correctAnswer","wrongAnswer","christTarrent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,wYCmCrCC,G,MAAc,SAACC,EAAMC,EAAKC,GAAZ,OAClB,yBAAKC,UAAU,SACb,4BAAKH,GADP,IACkB,2BAAOC,IAAKA,EAAKG,UAAQ,EAACF,KAAMA,IAChD,gCAIWG,EAxBH,kBACV,yBAAKF,UAAU,OACb,iCAAOG,KACNP,EAAY,aAAeQ,KAAM,GACjCR,EAAY,WAAYS,KAAU,GAClCT,EAAY,QAASU,KAAO,GAC5BV,EAAY,gBAAiBW,KAAc,GAC3CX,EAAY,aAAcY,KAAW,GACrCZ,EAAY,eAAgBa,KAAa,GACzCb,EAAY,aAAcc,KAAW,GACrCd,EAAY,gBAAiBe,KAAa,GAC1Cf,EAAY,iBAAkBgB,KAAe,GAC7ChB,EAAY,eAAgBiB,KAAa,GACzCjB,EAAY,gBAAiBkB,KAAe,KCnB7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.38df06ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chris-tarrent.6b68adc0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/clock-telephone.24abf496.mp3\";","module.exports = __webpack_public_path__ + \"static/media/correct-4.18c53f70.mp3\";","module.exports = __webpack_public_path__ + \"static/media/music-easy.5693e71c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/music-hard.484de5f7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/music-expert.9f40df4f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/music-medium.917ca99b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/intro-5.73621f56.mp3\";","module.exports = __webpack_public_path__ + \"static/media/are-you-sure.cc4c01dc.mp3\";","module.exports = __webpack_public_path__ + \"static/media/showdown-1.20864f8d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong-answer-2.d02d38e3.mp3\";","import React from 'react';\n\nimport christTarrent from './audio/chris-tarrent.mp3'\nimport clock from './audio/clock-telephone.mp3'\nimport correctAnswer from './audio/correct-4.mp3'\nimport easyMusic from './audio/music-easy.mp3'\nimport hardMusic from './audio/music-hard.mp3'\nimport harderMusic from './audio/music-expert.mp3'\nimport mediumMusic from './audio/music-medium.mp3'\nimport play from './audio/intro-5.mp3'\nimport selectAnswer from './audio/are-you-sure.mp3'\nimport showdown from './audio/showdown-1.mp3'\nimport wrongAnswer from './audio/wrong-answer-2.mp3'\n\nimport { version } from '../package.json';\n\nimport './App.css';\n\nconst App = () => (\n  <div className='App'>\n    <div>v{version}</div>\n    {createSound('Let\\'s Play', play, false)}\n    {createSound('Showdown', showdown, false)}\n    {createSound('Clock', clock, true)}\n    {createSound('Select Answer', selectAnswer, false)}\n    {createSound('Easy Music', easyMusic, true)}\n    {createSound('Medium Music', mediumMusic, true)}\n    {createSound('Hard Music', hardMusic, true)}\n    {createSound('Intense Music', harderMusic, true)}\n    {createSound('Correct Answer', correctAnswer, true)}\n    {createSound('Wrong Answer', wrongAnswer, true)}\n    {createSound('Chris Tarrent', christTarrent, true)}\n  </div>\n);\n\nconst createSound = (name, src, loop) => (\n  <div className='sound'>\n    <h3>{name}</h3> <audio src={src} controls loop={loop} />\n    <br />\n  </div >\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}